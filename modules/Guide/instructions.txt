
NestJS Modules - Complete Guide
===============================

1. What is a Module in NestJS?
------------------------------
In NestJS, a module is a class annotated with the `@Module()` decorator. It organizes related code into a cohesive block of functionality. Every NestJS application has at least one module — the root module (usually `AppModule`) — which is the entry point of the application.

Modules help with:
- Code organization and separation of concerns
- Reusability
- Dependency injection scoping
- Feature-based architecture

2. Basic Structure of a Module
------------------------------
import { Module } from '@nestjs/common';
import { ExampleService } from './example.service';
import { ExampleController } from './example.controller';

@Module({
  imports: [],                      // Import other modules here
  controllers: [ExampleController], // Declare controllers
  providers: [ExampleService],      // Declare providers (services, guards, pipes, etc.)
  exports: [ExampleService],        // Export providers to other modules
})
export class ExampleModule {}

3. Important Properties of @Module() Decorator
----------------------------------------------
- imports: List of modules required by this module.
- controllers: Controllers that handle incoming HTTP requests.
- providers: Services, factories, guards, interceptors, etc., that can be injected.
- exports: Subset of providers that should be available to other modules that import this one.

4. Root Module (AppModule)
--------------------------
This is the starting point of any NestJS application.

import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';

@Module({
  imports: [],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

5. Feature Modules
------------------
Instead of placing everything in the root module, NestJS encourages splitting your application into feature modules.

Example:
$ nest generate module users
$ nest generate service users
$ nest generate controller users

This creates a UsersModule that encapsulates all logic related to users.

6. Shared Module
----------------
A shared module is used to export common providers, services, or modules that need to be reused across other modules.

@Module({
  providers: [CommonService],
  exports: [CommonService],
})
export class SharedModule {}

Then in another module:

@Module({
  imports: [SharedModule],
})
export class OrdersModule {}

7. Global Modules
-----------------
If you want a module’s providers to be available everywhere (without importing the module every time), mark it as global.

import { Global, Module } from '@nestjs/common';

@Global()
@Module({
  providers: [ConfigService],
  exports: [ConfigService],
})
export class ConfigModule {}

You only need to import this module once (usually in AppModule), and its providers will be available app-wide.

8. Dynamic Modules
------------------
Dynamic modules allow configuration during runtime. It’s useful for modules like ConfigModule, DatabaseModule, etc.

@Module({})
export class DatabaseModule {
  static forRoot(options: DbOptions): DynamicModule {
    return {
      module: DatabaseModule,
      providers: [
        {
          provide: 'DB_OPTIONS',
          useValue: options,
        },
      ],
      exports: ['DB_OPTIONS'],
    };
  }
}

Usage:
imports: [DatabaseModule.forRoot({ host: 'localhost' })]

9. Module Ref and Dependency Injection
--------------------------------------
NestJS allows you to inject modules/services dynamically using ModuleRef:

import { Injectable, ModuleRef } from '@nestjs/core';

@Injectable()
export class SomeService {
  constructor(private moduleRef: ModuleRef) {}

  async doSomething() {
    const userService = this.moduleRef.get(UserService, { strict: false });
    userService.process();
  }
}

10. Circular Dependency in Modules
----------------------------------
When modules depend on each other, use forwardRef() to resolve circular dependencies.

@Module({
  imports: [forwardRef(() => UsersModule)],
  providers: [AuthService],
})
export class AuthModule {}

In UsersModule:

@Module({
  imports: [forwardRef(() => AuthModule)],
  providers: [UsersService],
})
export class UsersModule {}

11. Best Practices
------------------
- Keep modules small and focused on a single responsibility.
- Use SharedModule for reusable services or utilities.
- Avoid circular dependencies or resolve them carefully.
- Use feature modules to encapsulate domain logic.
- Always export what you want to use in another module.
- Use global modules sparingly — prefer explicit imports.

12. Real-Life Example
---------------------
users.module.ts:
@Module({
  controllers: [UsersController],
  providers: [UsersService],
  exports: [UsersService],
})
export class UsersModule {}

app.module.ts:
@Module({
  imports: [UsersModule],
})
export class AppModule {}

13. Summary
-----------
- Modules are the backbone of NestJS architecture.
- They help organize your code, enable dependency injection, and promote maintainability.
- You can have root, feature, shared, dynamic, and global modules.
- Use @Module() to declare modules and register their imports, providers, and controllers.